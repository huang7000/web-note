{"version":3,"sources":["webpack:///./node_modules/core-js/modules/es6.regexp.flags.js","webpack:///./node_modules/core-js/modules/es6.string.iterator.js","webpack:///./node_modules/core-js/modules/es6.regexp.to-string.js","webpack:///./src/demos/nodeDemo/helloworld.js"],"names":["flags","f","RegExp","prototype","configurable","get","$at","String","iterated","this","_t","_i","point","O","index","length","value","undefined","done","anObject","$flags","DESCRIPTORS","TO_STRING","$toString","define","fn","call","source","R","concat","name","fs","require","getFileData","fileName","Promise","resolve","readStream","createReadStream","setEncoding","on","chunk","all","then","result","writeStream","createWriteStream","write","end","readFile","err","content","console","log","toString"],"mappings":"mGACI,EAAQ,SAAmC,KAAd,KAAKA,OAAc,EAAQ,QAAgBC,EAAEC,OAAOC,UAAW,QAAS,CACvGC,cAAc,EACdC,IAAK,EAAQ,W,2DCFf,IAAIC,EAAM,EAAQ,OAAR,EAAwB,GAGlC,EAAQ,OAAR,CAA0BC,OAAQ,UAAU,SAAUC,GACpDC,KAAKC,GAAKH,OAAOC,GACjBC,KAAKE,GAAK,KAET,WACD,IAEIC,EAFAC,EAAIJ,KAAKC,GACTI,EAAQL,KAAKE,GAEjB,OAAIG,GAASD,EAAEE,OAAe,CAAEC,WAAOC,EAAWC,MAAM,IACxDN,EAAQN,EAAIO,EAAGC,GACfL,KAAKE,IAAMC,EAAMG,OACV,CAAEC,MAAOJ,EAAOM,MAAM,Q,oCCd/B,EAAQ,QACR,IAAIC,EAAW,EAAQ,QACnBC,EAAS,EAAQ,QACjBC,EAAc,EAAQ,QACtBC,EAAY,WACZC,EAAY,IAAID,GAEhBE,EAAS,SAAUC,GACrB,EAAQ,OAAR,CAAuBvB,OAAOC,UAAWmB,EAAWG,GAAI,IAItD,EAAQ,OAAR,EAAoB,WAAc,MAAsD,QAA/CF,EAAUG,KAAK,CAAEC,OAAQ,IAAK3B,MAAO,SAChFwB,GAAO,WACL,IAAII,EAAIT,EAASV,MACjB,MAAO,IAAIoB,OAAOD,EAAED,OAAQ,IAC1B,UAAWC,EAAIA,EAAE5B,OAASqB,GAAeO,aAAa1B,OAASkB,EAAOM,KAAKE,QAAKX,MAG3EM,EAAUO,MAAQR,GAC3BE,GAAO,WACL,OAAOD,EAAUG,KAAKjB,U,2ECsDtBsB,EAAMC,EAAQ,QAElB,SAASC,EAAYC,GACpB,OAAO,IAAIC,SAAQ,SAAAC,GAChB,IAAIC,EAAaN,EAAGO,iBAAiBJ,GACrCG,EAAWE,YAAY,QACvBF,EAAWG,GAAG,QAAO,SAAAC,GAAK,OAAEL,EAAQK,SAIxCN,QAAQO,IAAI,CAACT,EAAY,aAAaA,EAAY,gBAAgBU,MAAK,SAAAC,GACpE,IAAIC,EAAcd,EAAGe,kBAAkB,cAEvCD,EAAYE,MAAMH,EAAO,GAAG,IAAIA,EAAO,GAAG,QAC1CC,EAAYG,MAEZjB,EAAGkB,SAAS,cAAa,SAACC,EAAIC,GAAL,OAAeC,QAAQC,IAAIF,EAAQG","file":"js/chunk-612eb328.894a059f.js","sourcesContent":["// 21.2.5.3 get RegExp.prototype.flags()\nif (require('./_descriptors') && /./g.flags != 'g') require('./_object-dp').f(RegExp.prototype, 'flags', {\n  configurable: true,\n  get: require('./_flags')\n});\n","'use strict';\nvar $at = require('./_string-at')(true);\n\n// 21.1.3.27 String.prototype[@@iterator]()\nrequire('./_iter-define')(String, 'String', function (iterated) {\n  this._t = String(iterated); // target\n  this._i = 0;                // next index\n// 21.1.5.2.1 %StringIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var index = this._i;\n  var point;\n  if (index >= O.length) return { value: undefined, done: true };\n  point = $at(O, index);\n  this._i += point.length;\n  return { value: point, done: false };\n});\n","'use strict';\nrequire('./es6.regexp.flags');\nvar anObject = require('./_an-object');\nvar $flags = require('./_flags');\nvar DESCRIPTORS = require('./_descriptors');\nvar TO_STRING = 'toString';\nvar $toString = /./[TO_STRING];\n\nvar define = function (fn) {\n  require('./_redefine')(RegExp.prototype, TO_STRING, fn, true);\n};\n\n// 21.2.5.14 RegExp.prototype.toString()\nif (require('./_fails')(function () { return $toString.call({ source: 'a', flags: 'b' }) != '/a/b'; })) {\n  define(function toString() {\n    var R = anObject(this);\n    return '/'.concat(R.source, '/',\n      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);\n  });\n// FF44- RegExp#toString has a wrong name\n} else if ($toString.name != TO_STRING) {\n  define(function toString() {\n    return $toString.call(this);\n  });\n}\n","/* eslint-disable no-console */\n// eslint-disable-next-line no-console\n// console.log(\"cd E:/userproject/web-note/src/demos/nodeDemo\");\n// console.log(\"node helloworld.js\");\n// const http = require(\"http\");\n// const hostname = \"127.0.0.1\";\n// const port = 8080;\n// const server = http.createServer((req, res) => {\n//   res.statusCode = 200;\n//   res.setHeader(\"Content-Type\", \"text/plain\");\n//   res.end(\"hello world\");\n// });\n\n// server.listen(port, hostname, () => {\n//   console.log(`服务器运行在 http://${hostname}:${port}/`);\n// });\n//event.js 文件\n// var EventEmitter = require(\"events\").EventEmitter;\n// var event = new EventEmitter();\n// // event.on(\"some_event\", function () {\n// //   console.log(\"some_event 事件触发\");\n// // });\n// setTimeout(function () {\n//   event.emit(\"error\");\n// }, 1000);\n\n// const buf = Buffer.from(\"runoob2\", \"ascii\");\n\n// // 输出 72756e6f6f62\n// console.log(buf.toString(\"hex\"));\n\n// // 输出 cnVub29i\n// console.log(buf.toString(\"base64\"));\n// const buf = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5]);\n// const json = JSON.stringify(buf);\n\n// // 输出: {\"type\":\"Buffer\",\"data\":[1,2,3,4,5]}\n// //console.log(json);\n\n// const copy = JSON.parse(json, (key, value) => {\n//     return value && value.type === \"Buffer\" ?\n//         Buffer.from(value.data) :\n//         value;\n// });\n\n// const copy2 = JSON.parse(json, (key, value) => {\n//     if(value && value.type === \"Buffer\"){\n//         console.log(\"true\");\n//         console.log(value);\n//     }else{\n//         console.log(\"false\");\n//         console.log(value);\n//     }\n//     return value;\n// });\n// 输出: <Buffer 01 02 03 04 05>\n//console.log(copy);\n//console.log(copy2);\n// var buffer1 = Buffer.from('runoob');\n// // 剪切缓冲区\n// var buffer2 = buffer1.slice(0,2);\n// console.log(\"buffer1 : \" + buffer1.toString());//buffer1 : runoob\n// console.log(\"buffer2 : \" + buffer2.toString());//buffer2 : ru\n\n// 裁剪\n// var buffer_origin = Buffer.from('runoob');\n// var buffer_slice = buffer_origin.slice(0,2);\n// console.log(\"buffer slice content: \"+buffer_slice.toString());\n// console.log(\"buffer origin content: \"+buffer_origin.toString());\n// //buffer_slice.write(\"wirte\"); // Write buffer slice\n\n// // 裁剪前与原始字符串的改变\n// console.log(\"buffer slice content: \"+buffer_slice.toString());\n// console.log(\"buffer origin content: \"+buffer_origin.toString());\n\n//引入fs模块\nvar fs =  require(\"fs\")\n//封装请求文件数据的函数\nfunction getFileData(fileName){\n return new Promise(resolve=>{\n    var readStream = fs.createReadStream(fileName)  \n    readStream.setEncoding('UTF8')\n    readStream.on(\"data\",chunk=>resolve(chunk))\n  })\n}\n//并发请求\nPromise.all([getFileData(\"input.txt\"),getFileData(\"output.txt\")]).then(result=>{\n   var writeStream = fs.createWriteStream(\"output.txt\");\n   //讲两个文件的内容重新再写入到output.txt中\n   writeStream.write(result[0]+\",\"+result[1],\"UTF8\");\n   writeStream.end();\n   //再获取output.txt文件的内容\n   fs.readFile(\"output.txt\",(err,content)=>console.log(content.toString()))\n})"],"sourceRoot":""}