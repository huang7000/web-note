(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d21b26e"],{bf0d:function(s,e,a){"use strict";a.r(e);var t=function(){var s=this,e=s.$createElement,a=s._self._c||e;return a("section",[a("hv-snippet",{attrs:{title:""}},[a("template",{slot:"title"},[a("p",[s._v("基础概念")])]),a("p",[s._v("TypeScript中的声明会创建以下三种实体之一：命名空间，类型或值。")]),a("ol",[a("li",[s._v("创建命名空间的声明会新建一个命名空间，它包含了用（.）符号来访问时使用的名字。")]),a("li",[s._v("创建类型的声明是：用声明的模型创建一个类型并绑定到给定的名字上。")]),a("li",[s._v("创建值的声明会创建在JavaScript输出中看到的值。")])])],2),a("hv-snippet",{attrs:{title:""}},[a("template",{slot:"title"},[a("p",[s._v("合并接口")])]),a("p",[s._v("最简单也最常见的声明合并类型是接口合并。 从根本上说，合并的机制是把双方的成员放到一个同名的接口里。")]),a("div",{staticClass:"hv-snippet--tag hv-snippet--tag-typescript"},[s._v("typescript")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-typescript"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("interface")]),s._v(" Box {\n   height: "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("number")]),s._v(";\n   width: "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("number")]),s._v(";\n}\n\n"),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("interface")]),s._v(" Box {\n   scale: "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("number")]),s._v(";\n}\n\n"),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" box: Box = {height: "),a("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("5")]),s._v(", width: "),a("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("6")]),s._v(", scale: "),a("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("10")]),s._v("};\n")])]),a("blockquote",[a("p",[s._v("接口的非函数的成员应该是唯一的。如果它们不是唯一的，那么它们必须是相同的类型。如果两个接口中同时声明了同名的非函数成员且它们的类型不同，则编译器会报错。\n对于函数成员，每个同名函数声明都会被当成这个函数的一个重载。 同时需要注意，当接口 A与后来的接口 A合并时，后面的接口具有更高的优先级。")])]),a("div",{staticClass:"hv-snippet--tag hv-snippet--tag-typescript"},[s._v("typescript")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-typescript"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("interface")]),s._v(" Cloner {\n   clone(animal: Animal): Animal;\n}\n\n"),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("interface")]),s._v(" Cloner {\n   clone(animal: Sheep): Sheep;\n}\n\n"),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("interface")]),s._v(" Cloner {\n   clone(animal: Dog): Dog;\n   clone(animal: Cat): Cat;\n}\n")])]),a("p",[s._v("合并成一个声明")]),a("div",{staticClass:"hv-snippet--tag hv-snippet--tag-typescript"},[s._v("typescript")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-typescript"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("interface")]),s._v(" Cloner {\n   clone(animal: Dog): Dog;\n   clone(animal: Cat): Cat;\n   clone(animal: Sheep): Sheep;\n   clone(animal: Animal): Animal;\n}\n")])]),a("blockquote",[a("p",[s._v("注意每组接口里的声明顺序保持不变，但各组接口之间的顺序是后来的接口重载出现在靠前位置。")])]),a("p",[s._v("这个规则有一个例外是当出现特殊的函数签名时。 如果签名里有一个参数的类型是 单一的字符串字面量（比如，不是字符串字面量的联合类型），那么它将会被提升到重载列表的最顶端。")]),a("div",{staticClass:"hv-snippet--tag hv-snippet--tag-typescript"},[s._v("typescript")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-typescript"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("interface")]),s._v(" Document {\n   createElement(tagName: "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("any")]),s._v("): Element;\n}\n"),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("interface")]),s._v(" Document {\n   createElement(tagName: "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"div"')]),s._v("): HTMLDivElement;\n   createElement(tagName: "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"span"')]),s._v("): HTMLSpanElement;\n}\n"),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("interface")]),s._v(" Document {\n   createElement(tagName: "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("string")]),s._v("): HTMLElement;\n   createElement(tagName: "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"canvas"')]),s._v("): HTMLCanvasElement;\n}\n")])]),a("p",[s._v("合并成一个声明")]),a("div",{staticClass:"hv-snippet--tag hv-snippet--tag-typescript"},[s._v("typescript")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-typescript"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("interface")]),s._v(" Document {\n   createElement(tagName: "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"canvas"')]),s._v("): HTMLCanvasElement;\n   createElement(tagName: "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"div"')]),s._v("): HTMLDivElement;\n   createElement(tagName: "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"span"')]),s._v("): HTMLSpanElement;\n   createElement(tagName: "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("string")]),s._v("): HTMLElement;\n   createElement(tagName: "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("any")]),s._v("): Element;\n}\n")])])],2),a("hv-snippet",{attrs:{title:""}},[a("template",{slot:"title"},[a("p",[s._v("合并命名空间")])]),a("p",[s._v("与接口相似，同名的命名空间也会合并其成员。 命名空间会创建出命名空间和值，我们需要知道这两者都是怎么合并的。\n对于命名空间的合并，模块导出的同名接口进行合并，构成单一命名空间内含合并后的接口。")]),a("p",[s._v("Animals声明合并示例")]),a("div",{staticClass:"hv-snippet--tag hv-snippet--tag-typescript"},[s._v("typescript")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-typescript"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("namespace")]),s._v(" Animals {\n   "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" Zebra { }\n}\n\n"),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("namespace")]),s._v(" Animals {\n   "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("interface")]),s._v(" Legged { numberOfLegs: "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("number")]),s._v("; }\n   "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" Dog { }\n}\n")])]),a("p",[s._v("合并成一个声明")]),a("div",{staticClass:"hv-snippet--tag hv-snippet--tag-typescript"},[s._v("typescript")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-typescript"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("namespace")]),s._v(" Animals {\n   "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("interface")]),s._v(" Legged { numberOfLegs: "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("number")]),s._v("; }\n\n   "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" Zebra { }\n   "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" Dog { }\n}\n")])]),a("blockquote",[a("p",[s._v("你还需要了解非导出成员是如何处理的。 非导出成员仅在其原有的（合并前的）命名空间内可见。这就是说合并之后，从其它命名空间合并进来的成员无法访问非导出成员。")])]),a("div",{staticClass:"hv-snippet--tag hv-snippet--tag-typescript"},[s._v("typescript")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-typescript"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("namespace")]),s._v(" Animal {\n   "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" haveMuscles = "),a("span",{pre:!0,attrs:{class:"hljs-literal"}},[s._v("true")]),s._v(";\n\n   "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-function"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("animalsHaveMuscles")]),s._v("("),a("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n       "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" haveMuscles;\n   }\n}\n\n"),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("namespace")]),s._v(" Animal {\n   "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-function"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("doAnimalsHaveMuscles")]),s._v("("),a("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n       "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" haveMuscles;  "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Error, because haveMuscles is not accessible here")]),s._v("\n   }\n}\n")])])],2),a("hv-snippet",{attrs:{title:""}},[a("template",{slot:"title"},[a("p",[s._v("命名空间与类和函数和枚举类型合并")])]),a("p",[s._v("命名空间可以与其它类型的声明进行合并。 只要命名空间的定义符合将要合并类型的定义。合并结果包含两者的声明类型。")]),a("p",[s._v("表示内部类")]),a("div",{staticClass:"hv-snippet--tag hv-snippet--tag-typescript"},[s._v("typescript")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-typescript"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" Album {\n   label: Album.AlbumLabel;\n}\n"),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("namespace")]),s._v(" Album {\n   "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" AlbumLabel { }\n}\n")])]),a("p",[s._v("TypeScript使用声明合并来达到这个目的并保证类型安全。")]),a("div",{staticClass:"hv-snippet--tag hv-snippet--tag-typescript"},[s._v("typescript")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-typescript"}},[a("span",{pre:!0,attrs:{class:"hljs-function"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("buildLabel")]),s._v("("),a("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("name: "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("string")])]),s._v("): "),a("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("string")]),s._v(" ")]),s._v("{\n   "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" buildLabel.prefix + name + buildLabel.suffix;\n}\n\n"),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("namespace")]),s._v(" buildLabel {\n   "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" suffix = "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('""')]),s._v(";\n   "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" prefix = "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"Hello, "')]),s._v(";\n}\n\n"),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(buildLabel("),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"Sam Smith"')]),s._v("));\n")])]),a("p",[s._v("命名空间可以用来扩展枚举型")]),a("div",{staticClass:"hv-snippet--tag hv-snippet--tag-typescript"},[s._v("typescript")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-typescript"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("enum")]),s._v(" Color {\n   red = "),a("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(",\n   green = "),a("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v(",\n   blue = "),a("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("4")]),s._v("\n}\n"),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("namespace")]),s._v(" Color {\n   "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("export")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-function"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("mixColor")]),s._v("("),a("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("colorName: "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("string")])]),s._v(") ")]),s._v("{\n       "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (colorName == "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"yellow"')]),s._v(") {\n           "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" Color.red + Color.green;\n       }\n       "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (colorName == "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"white"')]),s._v(") {\n           "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" Color.red + Color.green + Color.blue;\n       }\n       "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (colorName == "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"magenta"')]),s._v(") {\n           "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" Color.red + Color.blue;\n       }\n       "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (colorName == "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"cyan"')]),s._v(") {\n           "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" Color.green + Color.blue;\n       }\n   }\n}\n")])])],2)],1)},r=[],p=a("2877"),n={},l=Object(p["a"])(n,t,r,!1,null,null,null);e["default"]=l.exports}}]);
//# sourceMappingURL=chunk-2d21b26e.fc74df39.js.map