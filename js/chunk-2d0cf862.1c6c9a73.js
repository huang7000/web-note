(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0cf862"],{"63a0":function(t,e,n){"use strict";n.r(e);var r=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("section",[n("hv-snippet",{attrs:{title:""}},[n("template",{slot:"title"},[n("p",[t._v("route 和 router 的区别")])]),n("ol",[n("li",[t._v("const 定义的变量不可以修改，而且必须初始化。")]),n("li",[t._v("var 定义的变量可以修改，如果不初始化会输出 undefined，不会报错。")]),n("li",[t._v("let 是块级作用域，函数内部使用 let 定义后，对函数外部无影响。")])])],2),n("hv-snippet",{attrs:{title:""}},[n("template",{slot:"title"},[n("p",[t._v("for...of for...in")])]),n("p",[t._v("for in 更适合遍历对象，不要使用 for in 遍历数组。\nfor in 遍历的是数组的索引（即键名），而 for of 遍历的是数组元素值。")])],2),n("hv-snippet",{attrs:{title:""}},[n("template",{slot:"title"},[n("p",[t._v("字符串方法")])]),n("p",[t._v("substr()：从起始索引号提取字符串中指定数目的字符。\nsubstring()：提取字符串中两个指定的索引号之间的字符。\nconcat():返回字符串，连接字符串。\nslice()：提取字符串的片断，并在新的字符串中返回被提取的部分。\nsplit()：把字符串分割为字符串数组。\nincludes()：返回布尔值，表示是否找到了参数字符串。\nstartsWith()：返回布尔值，表示参数字符串是否在原字符串的头部。\nendsWith()：返回布尔值，表示参数字符串是否在原字符串的尾部。\nrepeat 方法返回一个新字符串，表示将原字符串重复 n 次。\npadStart()用于头部补全，padEnd()用于尾部补全。\ntrimStart()消除字符串头部的空格，trimEnd()消除尾部的空格。\nreplace()只能替换第一个匹配。\nreplaceAll()方法，可以一次性替换所有匹配。")])],2),n("hv-snippet",{attrs:{title:""}},[n("template",{slot:"title"},[n("p",[t._v("数组方法")])]),n("ol",[n("li",[t._v("arr.push() 从后面添加元素，返回值为添加完后的数组的长度 arr.push(5)")]),n("li",[t._v("arr.pop() 从后面删除元素，只能是一个，返回值是删除的元素 arr.pop()")]),n("li",[t._v("arr.shift() 从前面删除元素，只能删除一个 返回值是删除的元素 arr.shift()")]),n("li",[t._v("arr.unshift() 从前面添加元素, 返回值是添加完后的数组的长度 arr.unshift(2)")]),n("li",[t._v("arr.splice(i,n) 删除从 i(索引值)开始之后的那个元素。返回值是删除的元素 arr.splice(2,2)")]),n("li",[t._v("arr.concat() 连接两个数组 返回值为连接后的新数组 arr.concat([1,2])")]),n("li",[t._v("arr.sort() 将数组进行排序,返回值是排好的数组，默认是按照最左边的数字进行排序，不是按照数字大小排序的，见例子。arr.sort() arr.sort((a, b) =>b-a)")]),n("li",[t._v("arr.reverse() 将数组反转,返回值是反转后的数组 arr.reverse()")]),n("li",[t._v("arr.slice(start,end) 切去索引值 start 到索引值 end 的数组，不包含 end 索引的值，返回值是切出来的数组 arr.slice(1,3)")]),n("li",[t._v("arr.forEach(callback) 遍历数组,无 return arr.forEach( (value,index,array)=>{console.log("),n("code",{pre:!0},[t._v("value:${value} index:${index} array:${array}")]),t._v(")})")]),n("li",[t._v("arr.map(callback) 映射数组(遍历数组),有 return 返回一个新数组 。 arr.map( (value,index,array)=>{value = value * 2 })")]),n("li",[t._v("arr.filter(callback) 过滤数组，返回一个满足要求的数组 arr.filter( (value, index) => value<3)")]),n("li",[t._v("arr.every(callback) 依据判断条件，数组的元素是否全满足，若满足则返回 ture arr.every( (value, index) =>value<3)")]),n("li",[t._v("arr.some() 依据判断条件，数组的元素是否有一个满足，若有一个满足则返回 ture arr.some( (value, index) =>value<3)")]),n("li",[t._v("arr.indexOf() 查找某个元素的索引值，若有重复的，则返回第一个查到的索引值若不存在，则返回 -1 arr.indexOf(2)")]),n("li",[t._v("arr.lastIndexOf() 和 arr.indexOf()的功能一样，不同的是从后往前查找 arr.19 arr.lastIndexOf()")]),n("li",[t._v('Array.from() 将伪数组变成数组，就是只要有 length 的就可以转成数组。let str = \'12345\' Array.from(str) // ["1", "2", "3", "4", "5"]')]),n("li",[t._v("Array.of() 将一组值转换成数组，类似于声明数组 let str = '12345' Array.from(str) // [\"12345\"]")]),n("li",[t._v("arr.find(callback) 找到第一个符合条件的数组成员 arr.find((value, index, array) =>value > 2)")]),n("li",[t._v("arr.findIndex(callback) 找到第一个符合条件的数组成员的索引值 arr.findIndex((value, index, array) => value > 3)")]),n("li",[t._v("arr.fill(target, start, end) 使用给定的值，填充一个数组,ps:填充完后会改变原数组 arr.fill(5,1,3)")]),n("li",[t._v("arr.includes() 判断数中是否包含给定的值 arr.includes(2)")]),n("li",[t._v("arr.keys() 遍历数组的键名")]),n("li",[t._v("arr.values() 遍历数组键值")]),n("li",[t._v("arr.entries() 遍历数组的键名和键值")])])],2),n("hv-snippet",{attrs:{title:""}},[n("template",{slot:"title"},[n("p",[t._v("对象方法")])]),n("ol",[n("li",[t._v("Object.is() 比较两个值是否相等 Object.is(+0, -0) // false Object.is(NaN, NaN) // true")]),n("li",[t._v("Object.assign() 对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。")]),n("li",[t._v("Object.keys() 遍历数组的键名")]),n("li",[t._v("Object.values() 遍历数组键值")]),n("li",[t._v("Object.entries() 遍历数组的键名和键值")])])],2),n("hv-snippet",{attrs:{title:""}},[n("template",{slot:"title"},[n("p",[t._v("操作节点")])]),n("ol",[n("li",[t._v("创建新节点\n　　 createDocumentFragment() //创建一个 DOM 片段\n　　 createElement() //创建一个具体的元素\n　　 createTextNode() //创建一个文本节点")]),n("li",[t._v("添加、移除、替换、插入\nappendChild()\n　　 removeChild()\n　　 redplaceChild()\n　　 insertBefore() //在已有的子节点前插入一个新的子节点")]),n("li",[t._v("查找\n　　 getElementsByTagName() //通过标签名称\n　　 getElementsByName() //通过元素的 Name 属性的值(IE 容错能力较强会得到一个数组，其中包括 id 等于 name 值的)\n　　 getElementById() //通过元素 Id，唯一性")])])],2),n("hv-snippet",{attrs:{title:""}},[n("template",{slot:"title"},[n("p",[t._v("如何消除一个数组里面重复的元素")])]),n("p",[t._v("Array.from(new Set(array))")])],2),n("hv-snippet",{attrs:{title:""}},[n("template",{slot:"title"},[n("p",[t._v("使用递归完成 1 到 100 的累加")])]),n("p",[t._v("function sum(num) {\nif( num==1 ){\nreturn 1;\n}\nreturn num+sum(num-1);\n}")])],2),n("hv-snippet",{attrs:{title:""}},[n("template",{slot:"title"},[n("p",[t._v("如何判断数据类型")])]),n("ol",[n("li",[t._v('使用 toString()检测对象类型\nvar toString = Object.prototype.toString;\ntoString.call(123); //"[object Number]"\ntoString.call(\'abcdef\'); //"[object String]"\ntoString.call(true); //"[object Boolean]"\ntoString.call([1, 2, 3, 4]); //"[object Array]"\ntoString.call({name:\'wenzi\', age:25}); //"[object Object]"\ntoString.call(function(){ console.log(\'this is function\'); }); //"[object Function]"\ntoString.call(undefined); //"[object Undefined]"\ntoString.call(null); //"[object Null]"\ntoString.call(new Date()); //"[object Date]"\ntoString.call(/^[a-zA-Z]{5,20}$/); //"[object RegExp]"\ntoString.call(new Error()); //"[object Error]"')]),n("li",[t._v('typeof 来判断数据类型\ntypeof 123, //"number"\ntypeof \'dsfsf\', //"string"\ntypeof false, //"boolean"\ntypeof [1,2,3], //"object"\ntypeof {a:1,b:2,c:3}, //"object"\ntypeof function(){console.log(\'aaa\');}, //"function"\ntypeof undefined, //"undefined"\ntypeof null, //"object"\ntypeof new Date(), //"object"\ntypeof /^[a-zA-Z]{5,20}$/, //"object"\ntypeof new Error() //"object"')]),n("li",[t._v("instanceof 运算符需要指定一个构造函数\n123 instanceof Number, //false\n'dsfsf' instanceof String, //false\nfalse instanceof Boolean, //false\n[1,2,3] instanceof Array, //true\n{a:1,b:2,c:3} instanceof Object, //true\nfunction(){console.log('aaa');} instanceof Function, //true\nundefined instanceof Object, //false\nnull instanceof Object, //false\nnew Date() instanceof Date, //true\n/^[a-zA-Z]{5,20}$/ instanceof RegExp, //true\nnew Error() instanceof Error //true\nvar toString = Object.prototype.toString;")])])],2),n("hv-snippet",{attrs:{title:""}},[n("template",{slot:"title"},[n("p",[t._v("Js 的事件委托是什么，原理是什么")])]),n("p",[t._v("JS 事件代理就是通过给父级元素（例如：ul,tr 等等）绑定事件，不给子级元素（例如:li,td 等等）绑定事件，然后当点击子级元素时，通过事件冒泡机制在其绑定的父元素上触发事件处理函数，主要目的是为了提升性能，因为我不用给每个子级元素绑定事件，只给父级元素绑定一次就好了，在原生 js 里面就是通过 event 对象的 taget 属性实现。")]),n("div",{staticClass:"hv-snippet--tag hv-snippet--tag-javascript"},[t._v("javascript")]),n("pre",{pre:!0},[n("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[n("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("var")]),t._v(" ul="),n("span",{pre:!0,attrs:{class:"hljs-built_in"}},[t._v("document")]),t._v(".querySelector("),n("span",{pre:!0,attrs:{class:"hljs-string"}},[t._v('"ul"')]),t._v(");\nul.onclick="),n("span",{pre:!0,attrs:{class:"hljs-function"}},[n("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("function")]),t._v("("),n("span",{pre:!0,attrs:{class:"hljs-params"}},[t._v("e")]),t._v(")")]),t._v("{\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[t._v("//e 这里指 event 对象")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("var")]),t._v(" target=e.target=e.target||e.srcElement;"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[t._v("//target 获取触发事件的目标（li）")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("if")]),t._v("（target.nodeName.toLowerCase()=="),n("span",{pre:!0,attrs:{class:"hljs-string"}},[t._v("' li '")]),t._v("）{\n"),n("span",{pre:!0,attrs:{class:"hljs-comment"}},[t._v("//目标（li）节点名转小写字母，不转换的话是大写字母")]),t._v("\nalert（target.innerHTML）\n}\n}\n")])])],2),n("hv-snippet",{attrs:{title:""}},[n("template",{slot:"title"},[n("p",[t._v("offsetWidth/offsetHeight,clientWidth/clientHeight 与 scrollWidth/scrollHeight 的区别")])]),n("p",[t._v("offsetWidth/offsetHeight 返回值包含 content + padding + border ，如果有滚动条，也不包含滚动条\nclientWidth/clientHeight 返回值只包含 content + padding，如果有滚动条，也不包含滚动条\nscrollWidth/scrollHeight 返回值包含 content + padding + 溢出内容的尺寸")])],2),n("hv-snippet",{attrs:{title:""}},[n("template",{slot:"title"},[n("p",[t._v("javascript 有哪些方法定义对象")])]),n("p",[t._v('方式一：\n通过对象字面量表示法（又称为直接量、原始方式）。\nvar obj = {name:"moyu"};\n方式二：\n通过 new 和构造函数 Object()、String()等。\nvar obj = new Object();\n方式三：\n自定义一个对象的构造函数，然后实例化对象。\nfunction a(o){\nthis.name = "moyu"\n}\nvar obj = new a();\n方式四：\n通过 Object.create()\nvar o1 = Object.create({x:1, y:2}); // o1 继承了属性 x 和 y')])],2),n("hv-snippet",{attrs:{title:""}},[n("template",{slot:"title"},[n("p",[t._v("new 操作符具体干了什么")])]),n("p",[t._v("1、创建一个空对象\nvarobj=new Object();\n2、设置原型链\nobj."),n("strong",[t._v("proto")]),t._v('= Func.prototype;\n3、让 Func 中的 this 指向 obj，并执行 Func 的函数体。\nvar result =Func.call(obj);\n4、判断 Func 的返回值类型：\n如果是值类型，返回 obj。如果是引用类型，就返回这个引用类型的对象。\nif (typeof(result) == "object"){\nfunc=result;\n}\nelse{\nfunc=obj;;\n}')])],2),n("hv-snippet",{attrs:{title:""}},[n("template",{slot:"title"},[n("p",[t._v("介绍 js 有哪些内置对象？")])]),n("p",[t._v("时间对象 date，\n字符串对象 string，\n数学对象 Math，\n数值对象 Number，\n数组对象 Array，\n函数对象 function,\n函数参数集合 arguments,\n布尔对象 Boolean，\n错误对象 Error,\n基础对象 Object")])],2),n("hv-snippet",{attrs:{title:""}},[n("template",{slot:"title"},[n("p",[t._v("介绍 js 有哪些内置对象？")])]),n("p",[t._v("时间对象 date，\n字符串对象 string，\n数学对象 Math，\n数值对象 Number，\n数组对象 Array，\n函数对象 function,\n函数参数集合 arguments,\n布尔对象 Boolean，\n错误对象 Error,\n基础对象 Object")])],2),n("hv-snippet",{attrs:{title:""}},[n("template",{slot:"title"},[n("p",[t._v("深拷贝 1.递归实现深拷贝 2.借用 JSON 对象的 parse 和 stringify")])])],2),n("hv-snippet",{attrs:{title:""}},[n("template",{slot:"title"},[n("p",[t._v("深拷贝")])]),n("p",[t._v("1、cookie 数据存放在客户的浏览器上，session 数据放在服务器上。\n2、cookie 不是很安全，别人可以分析存放在本地的 cookie 并进行 cookie 欺骗，考虑到安全应当使用 session。\n3、session 会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能，考虑到减轻服务器性能方面，应当使用 cookie。\n4、单个 cookie 保存的数据不能超过 4K，很多浏览器都限制一个站点最多保存 20 个 cookie。\n5、可以考虑将登陆信息等重要信息存放为 session，其他信息如果需要保留，可以放在 cookie 中。")])],2)],1)},a=[],l=n("2877"),i={},s=Object(l["a"])(i,r,a,!1,null,null,null);e["default"]=s.exports}}]);
//# sourceMappingURL=chunk-2d0cf862.1c6c9a73.js.map