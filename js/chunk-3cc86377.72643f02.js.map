{"version":3,"sources":["webpack:///./node_modules/@babel/runtime-corejs2/core-js/symbol/iterator.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/esm/typeof.js","webpack:///./src/demos/tsDemo/test.js"],"names":["module","exports","obj","constructor","prototype","y","console","log","x","Animal","Rhino","Elephant","Snake","zoo","zoo2","window","onmousedown","mouseEvent","button"],"mappings":"qGAAAA,EAAOC,QAAU,EAAQ,S,yFCEV,SAAS,EAAQC,GAa9B,OATE,EADqB,oBAAZ,KAAsD,kBAArB,IAChC,SAAiBA,GACzB,cAAcA,GAGN,SAAiBA,GACzB,OAAOA,GAA0B,oBAAZ,KAA0BA,EAAIC,cAAgB,KAAWD,IAAQ,IAAQE,UAAY,gBAAkBF,GAIzH,EAAQA,GC+CjB,IAAIG,EAAI,CAAC,EAAG,EAAG,MACfC,QAAQC,IAAI,UACZD,QAAQC,IAAR,EAAmBF,IACnB,IAAIG,EAAI,EACRF,QAAQC,IAAI,UACZD,QAAQC,IAAR,EAAmBC,KACS,WACxB,SAASC,OADe,GAA5B,IAKIC,EAAuB,WACvB,SAASA,KAET,OAAOA,EAHgB,GAKvBC,EAA0B,WAC1B,SAASA,KAET,OAAOA,EAHmB,GAK1BC,EAAuB,WACvB,SAASA,KAET,OAAOA,EAHgB,GAKvBC,EAAM,CAAC,IAAIH,EAAS,IAAIC,EAAY,IAAIC,GACxCE,EAAO,CAAC,IAAIJ,EAAS,IAAIC,EAAY,IAAIC,GAC7CN,QAAQC,IAAR,EAAmBM,IACnBP,QAAQC,IAAR,EAAmBO,IAInBC,OAAOC,YAAc,SAAUC,GAC3BX,QAAQC,IAAIU,EAAWC","file":"js/chunk-3cc86377.72643f02.js","sourcesContent":["module.exports = require(\"core-js/library/fn/symbol/iterator\");","import _Symbol$iterator from \"../../core-js/symbol/iterator\";\nimport _Symbol from \"../../core-js/symbol\";\nexport default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof _Symbol === \"function\" && typeof _Symbol$iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof _Symbol === \"function\" && obj.constructor === _Symbol && obj !== _Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}","\"use strict\";\n// function identity(ary:any):any{\n//   return ary;\n// }\n// console.log(identity(555))\n// console.log(identity({name:\"huang 700\" ,age:18}))\n// function identitype<T>(ary:T):T{\n//   return ary;\n// }\n// //传入所有的参数，包含类型参数\n// let outputT = identitype<string>(\"myString\"); \n// //利用了类型推论 -- 即编译器会根据传入的参数自动地帮助我们确定T的类型：\n// let output = identitype(\"myString\"); \n// console.log(identitype({name:\"huang 700\" ,age:18,sex:\"男\"}))\n// function identity<T>(arg: T): T {\n//   return arg;\n// }\n// let myIdentity: <T>(arg: T) => T = identity;\n// let yourIdentity: <U>(arg: U) => U = identity;\n// let myIdentity2: {<T>(arg: T): T} = identity;\n// enum Color {\n//   red, blue\n// }\n// enum Color2 {\n//   red, blue\n// }\n// enum E {\n//   mm,\n//   A = mm+B,  B, // error! 'A' is not constant-initialized, so 'B' needs an initializer\n// }\n// enum E {\n//   Foo,\n//   Bar,\n// }\n// function f(x: E) {\n//   if (x !== E.Foo) {\n//       //             ~~~~~~~~~~~\n//       // Error! Operator '!==' cannot be applied to types 'E.Foo' and 'E.Bar'.\n//   }\n// }\n// const enum Enum {\n//   A = 1,\n//   B = A * 2\n// } \n// const enum Directions {\n//   Up,\n//   Down,\n//   Left,\n//   Right\n// }\n// let directions = [Directions.Up, Directions.Down, Directions.Left, Directions.Right]\n// console.log(directions)\n// enum Enum2 {\n//   A\n// }\n// let a = Enum2.A;\n// let nameOfA = Enum2[a]; // \"A\"\n// console.log(nameOfA)\n// let x = 3;\n// let someValue: any = \"this is a string\";\n// let strLength: number = (<string>someValue).length;\n// let strLength2: number = (someValue as string).length;\nvar y = [0, 1, null];\nconsole.log(\"y的数据类型\");\nconsole.log(typeof y);\nvar x = 1;\nconsole.log(\"x的数据类型\");\nconsole.log(typeof x);\nvar Animal = /** @class */ (function () {\n    function Animal() {\n    }\n    return Animal;\n}());\nvar Rhino = /** @class */ (function () {\n    function Rhino() {\n    }\n    return Rhino;\n}());\nvar Elephant = /** @class */ (function () {\n    function Elephant() {\n    }\n    return Elephant;\n}());\nvar Snake = /** @class */ (function () {\n    function Snake() {\n    }\n    return Snake;\n}());\nvar zoo = [new Rhino(), new Elephant(), new Snake()];\nvar zoo2 = [new Rhino(), new Elephant(), new Snake()];\nconsole.log(typeof zoo);\nconsole.log(typeof zoo2);\n// window.onmousedown = function(mouseEvent) {\n//   console.log(mouseEvent.button);  //<- Error\n// };\nwindow.onmousedown = function (mouseEvent) {\n    console.log(mouseEvent.button); //<- Now, no error is given\n};\n"],"sourceRoot":""}