(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0f0612"],{"9bb5":function(s,t,a){"use strict";a.r(t);var e=function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("section",[a("hv-snippet",{attrs:{title:""}},[a("template",{slot:"title"},[a("p",[s._v("JSX 介绍")])]),a("p",[s._v("JSX 是一种嵌入式的类似 XML 的语法。 它可以被转换成合法的 JavaScript，尽管转换的语义是依据不同的实现而定的。 JSX 因 React 框架而流行，但也存在其它的实现。 TypeScript 支持内嵌，类型检查以及将 JSX 直接编译为 JavaScript。")])],2),a("hv-snippet",{attrs:{title:""}},[a("template",{slot:"title"},[a("p",[s._v("JSX 基本用法")])]),a("p",[s._v("想要使用 JSX 必须做两件事：")]),a("ol",[a("li",[s._v("给文件一个.tsx 扩展名")]),a("li",[s._v("启用 jsx 选项")])]),a("div",{staticClass:"hv-snippet--table"},[a("table",[a("thead",[a("tr",[a("th",[s._v("模式")]),a("th",[s._v("输入")]),a("th",[s._v("输出")]),a("th",[s._v("输出文件扩展名")])])]),a("tbody",[a("tr",[a("td",[a("code",{pre:!0},[s._v("preserve")])]),a("td",[a("code",{pre:!0},[s._v("<div />")])]),a("td",[a("code",{pre:!0},[s._v("<div />")])]),a("td",[a("code",{pre:!0},[s._v(".jsx")])])]),a("tr",[a("td",[a("code",{pre:!0},[s._v("react")])]),a("td",[a("code",{pre:!0},[s._v("<div />")])]),a("td",[a("code",{pre:!0},[s._v('React.createElement("div")')])]),a("td",[a("code",{pre:!0},[s._v(".js")])])]),a("tr",[a("td",[a("code",{pre:!0},[s._v("react-native")])]),a("td",[a("code",{pre:!0},[s._v("<div />")])]),a("td",[a("code",{pre:!0},[s._v("<div />")])]),a("td",[a("code",{pre:!0},[s._v(".js")])])])])])]),a("blockquote",[a("p",[s._v("你可以通过在命令行里使用--jsx 标记或 tsconfig.json 里的选项来指定模式。")])]),a("div",{staticClass:"hv-snippet--tag hv-snippet--tag-json"},[s._v("json")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-json"}},[s._v("{\n "),a("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v('"compilerOptions"')]),s._v(": {\n   "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/* Basic Options */")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v('"target"')]),s._v(": "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"es5"')]),s._v(",\n   "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/* target用于指定编译之后的版本目标:  'ES5', 'ES2015', 'ES2016', 'ES2017','ES2018'*/")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"hljs-attr"}},[s._v('"jsx"')]),s._v(": "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"preserve"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("/* 指定jsx代码用于的开发环境: 'preserve', 'react-native', or 'react'. */")]),s._v("\n }\n}\n")])])],2),a("hv-snippet",{attrs:{title:""}},[a("template",{slot:"title"},[a("p",[s._v("as 操作符")])]),a("p",[s._v("类型断言:"),a("code",{pre:!0},[s._v("var foo = <foo>bar;")])]),a("p",[s._v("由于不能够在.tsx 文件里使用上述语法，因此我们应该使用另一个类型断言操作符：as。")]),a("div",{staticClass:"hv-snippet--tag hv-snippet--tag-typescript"},[s._v("typescript")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-typescript"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" foo = bar "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("as")]),s._v(" foo;\n")])])],2),a("hv-snippet",{attrs:{title:""}},[a("template",{slot:"title"},[a("p",[s._v("类型检查")])]),a("ol",[a("li",[s._v('对于 React，固有元素会生成字符串（React.createElement("div")），然而由你自定义的组件却不会生成（React.createElement(MyComponent)）。')]),a("li",[s._v("传入 JSX 元素里的属性类型的查找方式不同。 固有元素属性本身就支持，然而自定义的组件会自己去指定它们具有哪个属性。")])]),a("blockquote",[a("p",[s._v("TypeScript 使用与 React 相同的规范 来区别它们。 固有元素总是以一个小写字母开头，基于值的元素总是以一个大写字母开头。")])])],2),a("hv-snippet",{attrs:{title:""}},[a("template",{slot:"title"},[a("p",[s._v("类型检查区别")])]),a("ol",[a("li",[s._v("固有元素使用特殊的接口 JSX.IntrinsicElements 来查找。")])]),a("div",{staticClass:"hv-snippet--tag hv-snippet--tag-typescript"},[s._v("typescript")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-typescript"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("declare")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("namespace")]),s._v(" JSX {\n "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("interface")]),s._v(" IntrinsicElements {\n   foo: "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("any")]),s._v(";\n }\n}\n\n<foo />; "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 正确")]),s._v("\n<bar />; "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 错误")]),s._v("\n")])]),a("ol",{attrs:{start:"2"}},[a("li",[s._v("基于值的元素会简单的在它所在的作用域里按标识符查找。")])]),a("div",{staticClass:"hv-snippet--tag hv-snippet--tag-typescript"},[s._v("typescript")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-typescript"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("import")]),s._v(" MyComponent "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("from")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"./myComponent"')]),s._v(";\n\n<MyComponent />; "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 正确")]),s._v("\n<SomeOtherComponent />; "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 错误")]),s._v("\n")])]),a("blockquote",[a("p",[s._v("有两种方式可以定义基于值的元素：无状态函数组件 (SFC)和类组件")])]),a("ol",{attrs:{start:"3"}},[a("li",[s._v("属性类型检查的第一步是确定元素属性类型。 这在固有元素和基于值的元素之间稍有不同。")])]),a("p",[s._v("对于固有元素，这是 JSX.IntrinsicElements 属性的类型。")]),a("div",{staticClass:"hv-snippet--tag hv-snippet--tag-typescript"},[s._v("typescript")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-typescript"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("declare")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("namespace")]),s._v(" JSX {\n "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("interface")]),s._v(" IntrinsicElements {\n   foo: { bar?: "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("boolean")]),s._v(" };\n }\n}\n\n"),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// `foo`的元素属性类型为`{bar?: boolean}`")]),s._v("\n<foo bar />;\n")])]),a("p",[s._v("对于基于值的元素取决于先前确定的在元素实例类型上的某个属性的类型。 至于该使用哪个属性来确定类型取决于 JSX.ElementAttributesProperty。")]),a("p",[s._v("如果未指定 JSX.ElementAttributesProperty，那么将使用类元素构造函数或 SFC 调用的第一个参数的类型。")]),a("div",{staticClass:"hv-snippet--tag hv-snippet--tag-typescript"},[s._v("typescript")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-typescript"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("declare")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("namespace")]),s._v(" JSX {\n "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("interface")]),s._v(" ElementAttributesProperty {\n   props; "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 指定用来使用的属性名")]),s._v("\n }\n}\n\n"),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" MyComponent {\n "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 在元素实例类型上指定属性")]),s._v("\n props: {\n   foo?: "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("string")]),s._v(";\n };\n}\n\n"),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// `MyComponent`的元素属性类型为`{foo?: string}`")]),s._v("\n<MyComponent foo="),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"bar"')]),s._v(" />;\n")])]),a("p",[s._v("元素属性类型用于的 JSX 里进行属性的类型检查。 支持可选属性和必须属性。")]),a("div",{staticClass:"hv-snippet--tag hv-snippet--tag-typescript"},[s._v("typescript")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-typescript"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("declare")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("namespace")]),s._v(" JSX {\n "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("interface")]),s._v(" IntrinsicElements {\n   foo: { requiredProp: "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("string")]),s._v("; optionalProp?: "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("number")]),s._v(" };\n }\n}\n\n<foo requiredProp="),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"bar"')]),s._v(" />; "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 正确")]),s._v("\n<foo requiredProp="),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"bar"')]),s._v(" optionalProp={"),a("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("} />; "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 正确")]),s._v("\n<foo />; "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 错误, 缺少 requiredProp")]),s._v("\n<foo requiredProp={"),a("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("} />; "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 错误, requiredProp 应该是字符串")]),s._v("\n<foo requiredProp="),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"bar"')]),s._v(" unknownProp />; "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 错误, unknownProp 不存在")]),s._v("\n<foo requiredProp="),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"bar"')]),s._v(" some-unknown-prop />; "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 正确, `some-unknown-prop`不是个合法的标识符")]),s._v("\n")])]),a("ol",{attrs:{start:"4"}},[a("li",[s._v("子孙类型检查")])]),a("p",[s._v("children 是元素属性(attribute)类型的一个特殊属性(property)，子 JSXExpression 将会被插入到属性里。\n与使用 JSX.ElementAttributesProperty 来决定 props 名类似，我们可以利用 JSX.ElementChildrenAttribute 来决定 children 名。 JSX.ElementChildrenAttribute 应该被声明在单一的属性(property)里。")]),a("div",{staticClass:"hv-snippet--tag hv-snippet--tag-typescript"},[s._v("typescript")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-typescript"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("declare")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("namespace")]),s._v(" JSX {\n   "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("interface")]),s._v(" ElementChildrenAttribute {\n   children: {};  "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// specify children name to use")]),s._v("\n   }\n}\n")])])],2),a("hv-snippet",{attrs:{title:""}},[a("template",{slot:"title"},[a("p",[s._v("无状态函数组件和类组件")])]),a("p",[s._v("无状态函数组件")]),a("div",{staticClass:"hv-snippet--tag hv-snippet--tag-typescript"},[s._v("typescript")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-typescript"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("interface")]),s._v(" FooProp {\n   name: "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("string")]),s._v(";\n   X: "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("number")]),s._v(";\n   Y: "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("number")]),s._v(";\n}\n\n"),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("declare")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-function"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("AnotherComponent")]),s._v("("),a("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("prop: {name: "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("string")]),s._v("}")]),s._v(")")]),s._v(";\n"),a("span",{pre:!0,attrs:{class:"hljs-function"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("ComponentFoo")]),s._v("("),a("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("prop: FooProp")]),s._v(") ")]),s._v("{\n   "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" <AnotherComponent name={prop.name} />;\n}\n\n"),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" Button = "),a("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("("),a("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("prop: {value: "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("string")]),s._v("}, context: { color: "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("string")]),s._v(" }")]),s._v(") =>")]),s._v(" <button>\n")])]),a("p",[s._v("由于无状态函数组件是简单的 JavaScript 函数，所以我们还可以利用函数重载。")]),a("div",{staticClass:"hv-snippet--tag hv-snippet--tag-typescript"},[s._v("typescript")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-typescript"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("interface")]),s._v(" ClickableProps {\n   children: JSX.Element[] | JSX.Element\n}\n\n"),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("interface")]),s._v(" HomeProps "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("extends")]),s._v(" ClickableProps {\n   home: JSX.Element;\n}\n\n"),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("interface")]),s._v(" SideProps "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("extends")]),s._v(" ClickableProps {\n   side: JSX.Element | "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("string")]),s._v(";\n}\n\n"),a("span",{pre:!0,attrs:{class:"hljs-function"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("MainButton")]),s._v("("),a("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("prop: HomeProps")]),s._v("): "),a("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("JSX")]),s._v("."),a("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Element")])]),s._v(";\n"),a("span",{pre:!0,attrs:{class:"hljs-function"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("MainButton")]),s._v("("),a("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("prop: SideProps")]),s._v("): "),a("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("JSX")]),s._v("."),a("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("Element")]),s._v(" ")]),s._v("{\n   ...\n}\n")])]),a("p",[s._v("类组件")]),a("div",{staticClass:"hv-snippet--tag hv-snippet--tag-typescript"},[s._v("typescript")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-typescript"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" MyComponent {\n render() {}\n}\n\n"),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 使用构造签名")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" myComponent = "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("new")]),s._v(" MyComponent();\n\n"),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 元素类的类型 => MyComponent")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 元素实例的类型 => { render: () => void }")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"hljs-function"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("MyFactoryFunction")]),s._v("("),a("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" {\n   render: "),a("span",{pre:!0,attrs:{class:"hljs-function"}},[a("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("()")]),s._v(" =>")]),s._v(" {},\n };\n}\n\n"),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 使用调用签名")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" myComponent = MyFactoryFunction();\n\n"),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 元素类的类型 => FactoryFunction")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 元素实例的类型 => { render: () => void }")]),s._v("\n")])]),a("p",[s._v("元素的实例类型")]),a("div",{staticClass:"hv-snippet--tag hv-snippet--tag-typescript"},[s._v("typescript")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-typescript"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("declare")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("namespace")]),s._v(" JSX {\n "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("interface")]),s._v(" ElementClass {\n   render: "),a("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("any")]),s._v(";\n }\n}\n\n"),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" MyComponent {\n render() {}\n}\n"),a("span",{pre:!0,attrs:{class:"hljs-function"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("MyFactoryFunction")]),s._v("("),a("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" { render: "),a("span",{pre:!0,attrs:{class:"hljs-function"}},[a("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("()")]),s._v(" =>")]),s._v(" {} };\n}\n\n<MyComponent />; "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 正确")]),s._v("\n<MyFactoryFunction />; "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 正确")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("class")]),s._v(" NotAValidComponent {}\n"),a("span",{pre:!0,attrs:{class:"hljs-function"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("NotAValidFactoryFunction")]),s._v("("),a("span",{pre:!0,attrs:{class:"hljs-params"}}),s._v(") ")]),s._v("{\n "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" {};\n}\n\n<NotAValidComponent />; "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 错误")]),s._v("\n<NotAValidFactoryFunction />; "),a("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 错误")]),s._v("\n")])])],2),a("hv-snippet",{attrs:{title:""}},[a("template",{slot:"title"},[a("p",[s._v("JSX结果类型")])]),a("p",[s._v("默认地JSX表达式结果的类型为any。 你可以自定义这个类型，通过指定JSX.Element接口。 然而，不能够从接口里检索元素，属性或JSX的子元素的类型信息。 它是一个黑盒。")])],2),a("hv-snippet",{attrs:{title:""}},[a("template",{slot:"title"},[a("p",[s._v("嵌入的表达式")])]),a("p",[s._v("JSX允许你使用{ }标签来内嵌表达式。")]),a("div",{staticClass:"hv-snippet--tag hv-snippet--tag-typescript"},[s._v("typescript")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-typescript"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a = <div>\n   {["),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'foo'")]),s._v(", "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'bar'")]),s._v("].map("),a("span",{pre:!0,attrs:{class:"hljs-function"}},[a("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("i")]),s._v(" =>")]),s._v(" <span>{i / "),a("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("}<"),a("span",{pre:!0,attrs:{class:"hljs-regexp"}},[s._v("/span>)}\n</")]),s._v("div>\n")])]),a("p",[s._v("上面的代码产生一个错误，因为你不能用数字来除以一个字符串。 输出如下，若你使用了preserve选项：")]),a("div",{staticClass:"hv-snippet--tag hv-snippet--tag-typescript"},[s._v("typescript")]),a("pre",{pre:!0},[a("code",{pre:!0,attrs:{"v-pre":"",class:"language-typescript"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("var")]),s._v(" a = <div>\n   {["),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'foo'")]),s._v(", "),a("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v("'bar'")]),s._v("].map("),a("span",{pre:!0,attrs:{class:"hljs-function"}},[a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" ("),a("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("i")]),s._v(") ")]),s._v("{ "),a("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" <span>{i / "),a("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("2")]),s._v("}<"),a("span",{pre:!0,attrs:{class:"hljs-regexp"}},[s._v("/span>; })}\n</")]),s._v("div>\n")])])],2)],1)},r=[],p=a("2877"),n={},l=Object(p["a"])(n,e,r,!1,null,null,null);t["default"]=l.exports}}]);
//# sourceMappingURL=chunk-2d0f0612.5205d9ab.js.map