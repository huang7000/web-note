(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0dd0dc"],{"806d":function(t,e,s){"use strict";s.r(e);var a=function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("section",[s("hv-snippet",{attrs:{title:""}},[s("template",{slot:"title"},[s("p",[t._v("vue 生命周期（创建到销毁）")])]),s("ol",[s("li",[s("code",{pre:!0},[t._v("beforeCreate")]),t._v("（新对象诞生）\n"),s("code",{pre:!0},[t._v("Vue")]),t._v("对象用新方法实例化。它创建一个"),s("code",{pre:!0},[t._v("Vue")]),t._v("类的对象来处理"),s("code",{pre:!0},[t._v("DOM")]),t._v("元素。对象的这个生命阶段可以通过"),s("code",{pre:!0},[t._v("beforeCreated")]),t._v("挂钩来访问 。我们可以在这个钩子中插入我们的代码，在对象初始化之前执行。")]),s("li",[s("code",{pre:!0},[t._v("created")]),t._v("创建（具有默认特性的对象）\n在这个生命阶段，对象及其事件完全初始化。"),s("code",{pre:!0},[t._v("created")]),t._v("是访问这个阶段并编写代码的钩子。")]),s("li",[s("code",{pre:!0},[t._v("beforeMounted")]),t._v("（对象在"),s("code",{pre:!0},[t._v("DOM")]),t._v("中适合形状）\n这个钩子被调用"),s("code",{pre:!0},[t._v("beforeMounted")]),t._v("。在这个阶段，它检查是否有任何模板可用于要在"),s("code",{pre:!0},[t._v("DOM")]),t._v("中呈现的对象。如果没有找到模板，那么它将所定义元素的外部"),s("code",{pre:!0},[t._v("HTML")]),t._v("视为模板。")]),s("li",[s("code",{pre:!0},[t._v("mounted")]),t._v("已安装（"),s("code",{pre:!0},[t._v("DOM")]),t._v("已准备就绪并放置在页面内）\n一旦模板准备就绪。它将数据放入模板并创建可呈现元素。用这个新的数据填充元素替换"),s("code",{pre:!0},[t._v("DOM")]),t._v("元素。这一切都发生在"),s("code",{pre:!0},[t._v("mounted")]),t._v("钩子上。")]),s("li",[s("code",{pre:!0},[t._v("beforeUpdate")]),t._v("（更改已完成，但尚未准备好更新"),s("code",{pre:!0},[t._v("DOM")]),t._v("）\n在外部事件/用户输入"),s("code",{pre:!0},[t._v("beforeUpdate")]),t._v("发生更改时，此钩子即在反映原始"),s("code",{pre:!0},[t._v("DOM")]),t._v("元素的更改之前被触发。")]),s("li",[s("code",{pre:!0},[t._v("updated")]),t._v(" 更新（在"),s("code",{pre:!0},[t._v("DOM")]),t._v("中呈现的更改）\n然后，通过实际更新"),s("code",{pre:!0},[t._v("DOM")]),t._v("对象并触发"),s("code",{pre:!0},[t._v("updated")]),t._v("，屏幕上的变化得到呈现 。")]),s("li",[s("code",{pre:!0},[t._v("beforeDestroy")]),t._v("（对象准备死掉）\n就在 Vue 对象被破坏并从内存中释放之前，"),s("code",{pre:!0},[t._v("deforeDestroy")]),t._v("钩子被触发，并允许我们在其中处理我们的自定义代码。")]),s("li",[s("code",{pre:!0},[t._v("destroyed")]),t._v("销毁（对象停止并从内存中删除）\n该"),s("code",{pre:!0},[t._v("destroyed")]),t._v("钩子被成功运行销毁对象上调用。")])])],2),s("hv-snippet",{attrs:{title:""}},[s("template",{slot:"title"},[s("p",[t._v("vue 生命周期的作用是什么")])]),s("ol",[s("li",[t._v("第一次页面加载会触发哪几个钩子\n第一次页面加载时会触发 beforeCreate, created, beforeMount, mounted 这几个钩子")]),s("li",[t._v("created 和 mounted 的区别\ncreated：在模板渲染成 html 前调用，即通常初始化某些属性值，然后再渲染成视图。\nmounted：在模板渲染成 html 后调用，通常是初始化页面完成后，再对 html 的 dom 节点进行一些需要的操作。")]),s("li",[t._v("vue 获取数据在哪个周期函数\n不用操作 dom,就放在 created，需要就放在 mounted")])])],2),s("hv-snippet",{attrs:{title:""}},[s("template",{slot:"title"},[s("p",[t._v("vue 组件间通信")])]),s("ol",[s("li",[t._v("props / $emit 适用 父子组件通信\n这种方法是 Vue 组件的基础，相信大部分同学耳闻能详，所以此处就不举例展开介绍。")]),s("li",[t._v("ref 与 $parent / $children 适用 父子组件通信\nref：如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例\n$parent / $children：访问父 / 子实例")]),s("li",[t._v("EventBus （$emit / $on）适用于 父子、隔代、兄弟组件通信\n这种方法通过一个空的 Vue 实例作为中央事件总线（事件中心），用它来触发事件和监听事件，从而实现任何组件间的通信，包括父子、隔代、兄弟组件。")]),s("li",[t._v('$attrs/$listeners 适用于 隔代组件通信\n$attrs：包含了父作用域中不被 prop 所识别 (且获取) 的特性绑定 ( class 和 style 除外 )。当一个组件没有声明任何 prop 时，这里会包含所有父作用域的绑定 ( class 和 style 除外 )，\n并且可以通过 v-bind="$attrs"传入内部组件。通常配合 inheritAttrs 选项一起使用。\n$listeners：包含了父作用域中的 (不含 .native 修饰器的) v-on 事件监听器。它可以通过 v-on="$listeners"传入内部组件')]),s("li",[t._v("provide / inject 适用于 隔代组件通信\n祖先组件中通过 provider 来提供变量，然后在子孙组件中通过 inject 来注入变量。\nprovide / inject API 主要解决了跨级组件间的通信问题，不过它的使用场景，主要是子组件获取上级组件的状态，跨级组件间建立了一种主动提供与依赖注入的关系。")]),s("li",[t._v("Vuex 适用于 父子、隔代、兄弟组件通信\nVuex 是一个专为 Vue.js 应用程序开发的状态管理模式。每一个 Vuex 应用的核心就是 store（仓库）。“store” 基本上就是一个容器，它包含着你的应用中大部分的状态 ( state )。\nVuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。\n改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。这样使得我们可以方便地跟踪每一个状态的变化。")])])],2),s("hv-snippet",{attrs:{title:""}},[s("template",{slot:"title"},[s("p",[t._v("vue 优缺点")])]),s("ol",[s("li",[t._v("优点\n用户体验好，快，内容的改变不需要重新加载整个页面，基于这一点 spa 对服务器压力较小。\n前后端分离。\n页面效果会比较炫酷（比如切换页面内容时的专场动画）。")]),s("li",[t._v("缺点：\n不利于 seo。\n导航不可用，如果一定要导航需要自行实现前进、后退。。\n初次加载时耗时多。\n页面复杂度提高很多。")])])],2),s("hv-snippet",{attrs:{title:""}},[s("template",{slot:"title"},[s("p",[s("code",[t._v("v-if")]),t._v(" vs "),s("code",[t._v("v-show")])])]),s("ol",[s("li",[s("code",{pre:!0},[t._v("v-if")]),t._v("是"),s("code",{pre:!0},[t._v("真正")]),t._v("的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。")]),s("li",[s("code",{pre:!0},[t._v("v-if")]),t._v("也是惰性的：如果在初始渲染时条件为假，则什么也不做。——直到条件第一次变为真时，才会开始渲染条件块。")]),s("li",[s("code",{pre:!0},[t._v("v-show")]),t._v("就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于"),s("code",{pre:!0},[t._v("CSS")]),t._v("进行切换。")]),s("li",[s("code",{pre:!0},[t._v("v-if")]),t._v("有更高的切换开销，而"),s("code",{pre:!0},[t._v("v-show")]),t._v("有更高的初始渲染开销。")]),s("li",[t._v("如果需要非常频繁地切换，则使用"),s("code",{pre:!0},[t._v("v-show")]),t._v("较好；如果在运行时条件很少改变，则使用"),s("code",{pre:!0},[t._v("v-if")]),t._v("较好。")])]),s("blockquote",[s("p",[s("code",{pre:!0},[t._v("v-if")]),t._v("有更高的切换开销，而"),s("code",{pre:!0},[t._v("v-show")]),t._v("有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用"),s("code",{pre:!0},[t._v("v-show")]),t._v("较好；如果在运行时条件很少改变，则使用"),s("code",{pre:!0},[t._v("v-if")]),t._v("较好。")])])],2),s("hv-snippet",{attrs:{title:""}},[s("template",{slot:"title"},[s("p",[t._v("CSS 样式")])]),s("ol",[s("li",[t._v("CSS 只在当前组件中起作用：在组件中的 style 前面加上 scoped")]),s("li",[t._v("默认样式修改：\n在样式外新增一个样式不添加 scoped\n使用 deep 样式穿透 .my /deep/ .el-input"),s("strong",[t._v("inner{border-radius: 30px;\n使用>>>穿透 .my >>> .el-input")]),t._v("inner{border-radius: 30px;}\n添加上!important 来增加权重 .my /deep/ .el-input__inner{width: 400px!important;}")])])],2),s("hv-snippet",{attrs:{title:""}},[s("template",{slot:"title"},[s("p",[t._v("如何获取 dom")])]),s("p",[t._v("使用 ref,给相应的元素加 ref=“name” 然后再 this.$refs.name 获取到该元素")])],2),s("hv-snippet",{attrs:{title:""}},[s("template",{slot:"title"},[s("p",[t._v("说出几种 vue 当中的指令和它的用法？")])]),s("ol",[s("li",[t._v("v-if：判断是否隐藏")]),s("li",[t._v("v-for：数据循环")]),s("li",[t._v("v-bind:class：绑定一个属性")]),s("li",[t._v("v-model:实现数据双向绑定")]),s("li",[t._v("v-on: 绑定事件")])])],2),s("hv-snippet",{attrs:{title:""}},[s("template",{slot:"title"},[s("p",[t._v("v-for 为什么使用 key")])]),s("p",[t._v("key 的主要作用就是用来提高渲染性能的!\nkey 属性可以避免数据混乱的情况出现 (如果元素中包含了有临时数据的元素,如果不用 key 就会产生数据混乱)")])],2),s("hv-snippet",{attrs:{title:""}},[s("template",{slot:"title"},[s("p",[t._v("axios 的特点有哪些")])]),s("ol",[s("li",[t._v("Axios 是一个基于 promise 的 HTTP 库，支持 promise 所有的 API")]),s("li",[t._v("它可以拦截请求和响应")]),s("li",[t._v("它可以转换请求数据和响应数据，并对响应回来的内容自动转换成 JSON 类型的数据")]),s("li",[t._v("安全性更高，客户端支持防御 XSRF")])])],2),s("hv-snippet",{attrs:{title:""}},[s("template",{slot:"title"},[s("p",[t._v("axios 的特点有哪些")])]),s("ol",[s("li",[t._v("axios.get(url[, config]) //get 请求用于列表和信息查询")]),s("li",[t._v("axios.delete(url[, config]) //删除")]),s("li",[t._v("axios.post(url[, data[, config]]) //post 请求用于信息的添加")]),s("li",[t._v("axios.put(url[, data[, config]]) //更新操作")])])],2),s("hv-snippet",{attrs:{title:""}},[s("template",{slot:"title"},[s("p",[t._v("vue.cli 项目中 src 目录每个文件夹和文件的用法")])]),s("p",[t._v("assets 文件夹是放静态资源\ncomponents 是放组件\nrouter 是定义路由相关的配置\nview 视图\napp.vue 是一个应用主组件\nmain.js 是入口文件")])],2),s("hv-snippet",{attrs:{title:""}},[s("template",{slot:"title"},[s("p",[t._v("vue.cli 项目中 src 目录每个文件夹和文件的用法")])]),s("p",[t._v("methods, watch 和 computed 都是以函数为基础的，但各自却都不同；")]),s("ol",[s("li",[t._v("computed(计算属性)\n　　计算属性的结果会被缓存，除非依赖的响应式属性变化才会重新计算。注意，如果某个依赖 (比如非响应式属性) 在该实例范畴之外，则计算属性是不会被更新的。")]),s("li",[t._v("methods(方法)\n　　 methods 将被混入到 Vue 实例中。可以直接通过 VM 实例访问这些方法，或者在指令表达式中使用。方法中的 this 自动绑定为 Vue 实例。")]),s("li",[t._v("watch(侦听属性)\n　　一个对象，键是需要观察的表达式，值是对应回调函数。值也可以是方法名、路由，或者包含选项的对象。Vue 实例将会在实例化时调用 $watch()，遍历 watch 对象的每一个属性。")])])],2),s("hv-snippet",{attrs:{title:""}},[s("template",{slot:"title"},[s("p",[t._v("this.$nextTick()的使用")])]),s("p",[t._v("this.$nextTick()将回调延迟到下次 DOM 更新循环之后执行。\n在修改数据之后立即使用它，然后等待 DOM 更新。\n它跟全局方法 Vue.nextTick 一样，不同的是回调的 this 自动绑定到调用它的实例上。")])],2),s("hv-snippet",{attrs:{title:""}},[s("template",{slot:"title"},[s("p",[t._v("vue 组件中 data 为什么必须是一个函数")])]),s("p",[t._v("如果 data 是一个函数的话，这样每复用一次组件，就会返回一份新的 data，类似于给每个组件实例创建一个私有的数据空间，让各个组件实例维护各自的数据。\n而单纯的写成对象形式，就使得所有组件实例共用了一份 data，就会造成一个变了全都会变的结果。\n所以说 vue 组件的 data 必须是函数。这都是因为 js 的特性带来的，跟 vue 本身设计无关。")])],2),s("hv-snippet",{attrs:{title:""}},[s("template",{slot:"title"},[s("p",[t._v("Vue 中双向数据绑定是如何实现的")])]),s("p",[t._v("实现 mvvm 的双向绑定，是采用数据劫持结合发布者-订阅者模式的方式，通过 Object.defineProperty()来劫持各个属性的 setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。就必须要实现以下几点：")]),s("ol",[s("li",[t._v("实现一个数据监听器 Observer，能够对数据对象的所有属性进行监听，如有变动可拿到最新值并通知订阅者")]),s("li",[t._v("实现一个指令解析器 Compile，对每个元素节点的指令进行扫描和解析，根据指令模板替换数据，以及绑定相应的更新函数")]),s("li",[t._v("实现一个 Watcher，作为连接 Observer 和 Compile 的桥梁，能够订阅并收到每个属性变动的通知，执行指令绑定的相应回调函数，从而更新视图")]),s("li",[t._v("mvvm 入口函数，整合以上三者")])])],2),s("hv-snippet",{attrs:{title:""}},[s("template",{slot:"title"},[s("p",[t._v("vue-router 有哪些组件？（Vue.js 官方的路由插件）")])]),s("p",[s("code",{pre:!0},[t._v("<router-link :to='' class='active-class'>")]),t._v("：路由声明式跳转 ，active-class 是标签被点击时的样式\n"),s("code",{pre:!0},[t._v("<router-view>")]),t._v("：渲染路由的容器\n"),s("code",{pre:!0},[t._v("<keep-alive>")]),t._v("：缓存组件")])],2),s("hv-snippet",{attrs:{title:""}},[s("template",{slot:"title"},[s("p",[t._v("怎么定义 vue-router 的动态路由? 怎么获取传过来的值")])]),s("ol",[s("li",[t._v("声明式："),s("code",{pre:!0},[t._v('<router-link :to="..." replace>')])]),s("li",[t._v("编程式："),s("code",{pre:!0},[t._v("router.replace(...)")]),t._v("\n可以通过 query ,param 两种方式\n$route.params.属性\n$route.query.属性")])])],2),s("hv-snippet",{attrs:{title:""}},[s("template",{slot:"title"},[s("p",[t._v("vue-router 有哪几种导航钩子?")])]),s("p",[t._v("第一种：全局导航钩子\n前置守卫")]),s("div",{staticClass:"hv-snippet--tag hv-snippet--tag-javascript"},[t._v("javascript")]),s("pre",{pre:!0},[s("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t._v("router.beforeEach("),s("span",{pre:!0,attrs:{class:"hljs-function"}},[t._v("("),s("span",{pre:!0,attrs:{class:"hljs-params"}},[t._v("to, "),s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("from")]),t._v(", next")]),t._v(") =>")]),t._v(" {\n "),s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("if")]),t._v(" (to.matched.some("),s("span",{pre:!0,attrs:{class:"hljs-function"}},[t._v("("),s("span",{pre:!0,attrs:{class:"hljs-params"}},[t._v("item")]),t._v(") =>")]),t._v(" item.meta.may)) {\n   "),s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("let")]),t._v(" id = "),s("span",{pre:!0,attrs:{class:"hljs-built_in"}},[t._v("window")]),t._v(".localStorage.getItem("),s("span",{pre:!0,attrs:{class:"hljs-string"}},[t._v('"id"')]),t._v(");\n   "),s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("if")]),t._v(" (id) {\n     next();\n   } "),s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("else")]),t._v(" {\n     next({ "),s("span",{pre:!0,attrs:{class:"hljs-attr"}},[t._v("name")]),t._v(": "),s("span",{pre:!0,attrs:{class:"hljs-string"}},[t._v('"login"')]),t._v(" });\n   }\n } "),s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("else")]),t._v(" {\n   next();\n }\n});\n")])]),s("p",[t._v("后置钩子")]),s("div",{staticClass:"hv-snippet--tag hv-snippet--tag-javascript"},[t._v("javascript")]),s("pre",{pre:!0},[s("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t._v("router.afterEach("),s("span",{pre:!0,attrs:{class:"hljs-function"}},[t._v("("),s("span",{pre:!0,attrs:{class:"hljs-params"}},[t._v("to, "),s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("from")])]),t._v(") =>")]),t._v(" {\n "),s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("if")]),t._v(" (to.meta && to.meta.title) {\n   "),s("span",{pre:!0,attrs:{class:"hljs-built_in"}},[t._v("document")]),t._v(".title = to.meta.title;\n } "),s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("else")]),t._v(" {\n   "),s("span",{pre:!0,attrs:{class:"hljs-built_in"}},[t._v("document")]),t._v(".title = "),s("span",{pre:!0,attrs:{class:"hljs-string"}},[t._v('"666"')]),t._v(";\n }\n});\n")])]),s("p",[t._v("第二种：单独路由独享钩子")]),s("div",{staticClass:"hv-snippet--tag hv-snippet--tag-javascript"},[t._v("javascript")]),s("pre",{pre:!0},[s("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t._v("{\n   "),s("span",{pre:!0,attrs:{class:"hljs-attr"}},[t._v("path")]),t._v(": "),s("span",{pre:!0,attrs:{class:"hljs-string"}},[t._v("'/home'")]),t._v(",\n   "),s("span",{pre:!0,attrs:{class:"hljs-attr"}},[t._v("name")]),t._v(": "),s("span",{pre:!0,attrs:{class:"hljs-string"}},[t._v("'home'")]),t._v(",\n   "),s("span",{pre:!0,attrs:{class:"hljs-attr"}},[t._v("component")]),t._v(": Home,\n   beforeEnter(to, "),s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("from")]),t._v(", next) {\n       "),s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("if")]),t._v(" ("),s("span",{pre:!0,attrs:{class:"hljs-built_in"}},[t._v("window")]),t._v(".localStorage.getItem("),s("span",{pre:!0,attrs:{class:"hljs-string"}},[t._v('"id"')]),t._v(")) {\n           next()\n       } "),s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("else")]),t._v(" {\n           next({ "),s("span",{pre:!0,attrs:{class:"hljs-attr"}},[t._v("name")]),t._v(": "),s("span",{pre:!0,attrs:{class:"hljs-string"}},[t._v('"login"')]),t._v(" })\n       }\n   }\n}\n")])]),s("p",[t._v("第三种：组件内的钩子")]),s("div",{staticClass:"hv-snippet--tag hv-snippet--tag-javascript"},[t._v("javascript")]),s("pre",{pre:!0},[s("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t._v("beforeRouteEnter(to, "),s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("from")]),t._v(", next) {\n   "),s("span",{pre:!0,attrs:{class:"hljs-comment"}},[t._v("// do someting")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"hljs-comment"}},[t._v("// 在渲染该组件的对应路由被 confirm 前调用")]),t._v("\n},\nbeforeRouteUpdate(to, "),s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("from")]),t._v(", next) {\n   "),s("span",{pre:!0,attrs:{class:"hljs-comment"}},[t._v("// do someting")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"hljs-comment"}},[t._v("// 在当前路由改变，但是依然渲染该组件是调用")]),t._v("\n},\nbeforeRouteLeave(to, "),s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("from")]),t._v(" ,next) {\n   "),s("span",{pre:!0,attrs:{class:"hljs-comment"}},[t._v("// do someting")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"hljs-comment"}},[t._v("// 导航离开该组件的对应路由时被调用")]),t._v("\n}\n")])])],2),s("hv-snippet",{attrs:{title:""}},[s("template",{slot:"title"},[s("p",[t._v("route 和 router 的区别")])]),s("p",[t._v("router 为 VueRouter 的实例，相当于一个全局的路由器对象，里面含有很多属性和子对象，例如 history 对象。经常用的跳转链接就可以用 this.$router.push，和 router-link 跳转一样。\nroute 相当于当前正在跳转的路由对象。。可以从里面获取 name,path,params,query 等。")])],2),s("hv-snippet",{attrs:{title:""}},[s("template",{slot:"title"},[s("p",[t._v("路由懒加载")])]),s("p",[t._v("结合 Vue 的异步组件和 Webpack 的代码分割功能，实现路由组件的懒加载。")]),s("ol",[s("li",[t._v("可以将异步组件定义为返回一个 Promise 的工厂函数 (该函数返回的 Promise 应该 resolve 组件本身)：")])]),s("div",{staticClass:"hv-snippet--tag hv-snippet--tag-javascript"},[t._v("javascript")]),s("pre",{pre:!0},[s("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("const")]),t._v(" Foo = "),s("span",{pre:!0,attrs:{class:"hljs-function"}},[s("span",{pre:!0,attrs:{class:"hljs-params"}},[t._v("()")]),t._v(" =>")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"hljs-built_in"}},[t._v("Promise")]),t._v(".resolve({\n   "),s("span",{pre:!0,attrs:{class:"hljs-comment"}},[t._v("/* 组件定义对象 */")]),t._v("\n });\n")])]),s("ol",{attrs:{start:"2"}},[s("li",[t._v("在 Webpack 2 中，我们可以使用动态 import 语法来定义代码分块点 (split point)：")])]),s("div",{staticClass:"hv-snippet--tag hv-snippet--tag-javascript"},[t._v("javascript")]),s("pre",{pre:!0},[s("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("import")]),t._v("("),s("span",{pre:!0,attrs:{class:"hljs-string"}},[t._v('"./Foo.vue"')]),t._v("); "),s("span",{pre:!0,attrs:{class:"hljs-comment"}},[t._v("// 返回 Promise")]),t._v("\n")])]),s("ol",{attrs:{start:"3"}},[s("li",[t._v("结合这两者，这就是如何定义一个能够被 Webpack 自动代码分割的异步组件。")])]),s("div",{staticClass:"hv-snippet--tag hv-snippet--tag-javascript"},[t._v("javascript")]),s("pre",{pre:!0},[s("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("const")]),t._v(" Foo = "),s("span",{pre:!0,attrs:{class:"hljs-function"}},[s("span",{pre:!0,attrs:{class:"hljs-params"}},[t._v("()")]),t._v(" =>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("import")]),t._v("("),s("span",{pre:!0,attrs:{class:"hljs-string"}},[t._v('"./Foo.vue"')]),t._v(");\n")])]),s("ol",{attrs:{start:"4"}},[s("li",[t._v("在路由配置中什么都不需要改变，只需要像往常一样使用 Foo：")])]),s("div",{staticClass:"hv-snippet--tag hv-snippet--tag-javascript"},[t._v("javascript")]),s("pre",{pre:!0},[s("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("const")]),t._v(" router = "),s("span",{pre:!0,attrs:{class:"hljs-keyword"}},[t._v("new")]),t._v(" VueRouter({\n "),s("span",{pre:!0,attrs:{class:"hljs-attr"}},[t._v("routes")]),t._v(": [{ "),s("span",{pre:!0,attrs:{class:"hljs-attr"}},[t._v("path")]),t._v(": "),s("span",{pre:!0,attrs:{class:"hljs-string"}},[t._v('"/foo"')]),t._v(", "),s("span",{pre:!0,attrs:{class:"hljs-attr"}},[t._v("component")]),t._v(": Foo }],\n});\n")])])],2),s("hv-snippet",{attrs:{title:""}},[s("template",{slot:"title"},[s("p",[t._v("vuex？")])]),s("ol",[s("li",[s("p",[t._v("vuex 的流程：\n页面通过 mapAction 异步提交事件到 action。\naction 通过 commit 把对应参数同步提交到 mutation。\nmutation 会修改 state 中对应的值。\n最后通过 getter 把对应值跑出去，在页面的计算属性中，通过 mapGetter 来动态获取 state 中的值")])]),s("li",[s("p",[t._v("vuex 有哪几种状态和属性\n有五种,分别是 State , Getter , Mutation , Action , Module (就是 mapAction)\nstate => 基本数据\ngetters => 从基本数据派生的数据\nmutations => 提交更改数据的方法，同步！\nactions => 像一个装饰器，包裹 mutations，使之可以异步。\nmodules => 模块化 Vuex")])])])],2)],1)},r=[],v=s("2877"),p={},l=Object(v["a"])(p,a,r,!1,null,null,null);e["default"]=l.exports}}]);
//# sourceMappingURL=chunk-2d0dd0dc.03d7038a.js.map